@page "/actor"
@using System.Collections.Generic
@using FrontBlazor.Services
@inject ServicioEntidad servicioEntidad
@inject IJSRuntime jsRuntime

<PageTitle>actores</PageTitle>

<h1>actores</h1>

@if (editando || creando)
{
    <EditForm Model="@actorActual" OnValidSubmit="Guardaractor">
        <div class="mb-3">
            <label for="nombre">nombre:</label>
            <InputText id="nombre" class="form-control" @bind-Value="actorActual.nombre" required />
        </div>
        <div class="mb-3">
            <label for="fkidtipoactor">ID Actor:</label>
            <InputText id="fkidtipoactor" class="form-control" @bind-Value="actorActual.fkidtipoactor" required />
        </div>
        <button type="submit" class="btn btn-success">Guardar</button>
        <button type="button" class="btn btn-secondary" @onclick="CancelarEdicion">Cancelar</button>
    </EditForm>
}
else
{
    <div class="mb-3">
        <button class="btn btn-primary" @onclick="IniciarCreacion">Crear actor</button>
    </div>

    @if (cargando)
    {
        <p><em>Cargando...</em></p>
    }
    else if (actores == null || actores.Count == 0)
    {
        <p>No hay actores disponibles.</p>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>nombre</th>
                        <th>ID Actor</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in actores)
                    {
                        <tr>
                            <td>@ObtenerValor(item, "id")</td>
                            <td>@ObtenerValor(item, "nombre")</td>
                            <td>@ObtenerValor(item, "fkidtipoactor")</td>
                            <td>
                                <button class="btn btn-warning" @onclick="() => IniciarEdicion(item)">Editar</button>
                                <button class="btn btn-danger" @onclick="() => ConfirmarEliminar(item)">Eliminar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}

@if (errorMensaje != null)
{
    <div class="alert alert-danger">
        Error: @errorMensaje
    </div>
}

@code {
    private List<Dictionary<string, object>> actores = new();
    private bool cargando = true;
    private string? errorMensaje = null;
    private bool creando = false;
    private bool editando = false;

    private actorModel actorActual = new();

    private const string PROYECTO = "proyecto";
    private const string TABLA = "actor";

    protected override async Task OnInitializedAsync()
    {
        await Cargaractores();
    }

    private async Task Cargaractores()
    {
        cargando = true;
        errorMensaje = null;

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA);
            actores = resultado ?? new();
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar: {ex.Message}";
            actores = new();
        }
        finally
        {
            cargando = false;
        }
    }

    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        return diccionario.TryGetValue(clave, out var valor) ? valor?.ToString() ?? string.Empty : string.Empty;
    }

    private void IniciarCreacion()
    {
        creando = true;
        editando = false;
        actorActual = new();
    }

    private void IniciarEdicion(Dictionary<string, object> item)
    {
        actorActual = new actorModel
        {
            Id = item["id"]?.ToString() ?? string.Empty,
            nombre = item["nombre"]?.ToString() ?? string.Empty,
            fkidtipoactor = item["fkidtipoactor"]?.ToString() ?? string.Empty
        };

        creando = false;
        editando = true;
    }

    private async Task Guardaractor()
    {
        try
        {
            var entidad = new Dictionary<string, object>
            {
                { "nombre", actorActual.nombre },
                { "fkidtipoactor", actorActual.fkidtipoactor }
            };

            if (creando)
                await servicioEntidad.CrearAsync(PROYECTO, TABLA, entidad);
            else if (editando)
                await servicioEntidad.ActualizarAsync(PROYECTO, TABLA, "id", actorActual.Id, entidad);

            creando = editando = false;
            await Cargaractores();
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al guardar: {ex.Message}";
        }
    }

    private void CancelarEdicion()
    {
        creando = false;
        editando = false;
    }

    private async Task ConfirmarEliminar(Dictionary<string, object> item)
    {
        if (!item.TryGetValue("id", out var idObj)) return;

        var id = idObj?.ToString() ?? string.Empty;
        if (string.IsNullOrEmpty(id)) return;

        var confirmado = await jsRuntime.InvokeAsync<bool>("confirm", $"Â¿Eliminar actor con ID {id}?");
        if (confirmado)
            await Eliminar(id);
    }

    private async Task Eliminar(string id)
    {
        try
        {
            await servicioEntidad.EliminarAsync(PROYECTO, TABLA, "id", id);
            await Cargaractores();
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al eliminar: {ex.Message}";
        }
    }

    private class actorModel
    {
        public string Id { get; set; } = string.Empty;
        public string nombre { get; set; } = string.Empty;
        public string fkidtipoactor { get; set; } = string.Empty;
    }
}
