@page "/rol"
@using FrontBlazor.Services
@inject ServicioEntidad ServicioApi
@inject IJSRuntime ServicioJS
@inherits ValidacionAcceso

<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Gestionar <b>Roles</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <a href="#modalAgregarRol" class="btn btn-success" data-bs-toggle="modal" @onclick="PrepararParaAgregar">
                            <i class="material-icons">&#xE147;</i> <span>Añadir Nuevo Rol</span>
                        </a>
                        <a href="#modalConsultarRol" class="btn btn-success" data-bs-toggle="modal" @onclick="PrepararParaConsulta">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar Rol</span>
                        </a>
                    </div>
                </div>
            </div>
            @if (roles == null)
            {
                <p>Cargando...</p>
            }
            else if (!roles.Any())
            {
                <p>No hay roles registrados.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Nombre</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var rol in roles)
                        {
                            <tr>
                                <td>@rol["id"]</td>
                                <td>@rol["nombre"]</td>
                                <td>
                                    <a href="#modalEditarRol" class="edit" data-bs-toggle="modal" @onclick="() => PrepararParaEditar(rol)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Editar">&#xE254;</i>
                                    </a>
                                    <a href="#modalEliminarRol" class="delete" data-bs-toggle="modal" @onclick="() => PrepararParaEliminar(rol)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Eliminar">&#xE872;</i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

<!-- Modal para Agregar Rol -->
<div class="modal fade" id="modalAgregarRol" tabindex="-1" role="dialog" aria-labelledby="modalAgregarRolLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <EditForm Model="@rolActual" OnValidSubmit="AgregarRol">
                <DataAnnotationsValidator />
                <div class="modal-header">
                    <h5 class="modal-title" id="modalAgregarRolLabel">Añadir Rol</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Nombre</label>
                        <InputText class="form-control" @bind-Value="nombre" />
                        <ValidationMessage For="@(() => nombre)" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Añadir</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Modal para Editar Rol -->
<div class="modal fade" id="modalEditarRol" tabindex="-1" role="dialog" aria-labelledby="modalEditarRolLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <EditForm Model="@rolActual" OnValidSubmit="EditarRol">
                <DataAnnotationsValidator />
                <div class="modal-header">
                    <h5 class="modal-title" id="modalEditarRolLabel">Editar Rol</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Nombre</label>
                        <InputText class="form-control" @bind-Value="nombre" />
                        <ValidationMessage For="@(() => nombre)" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Guardar</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Modal para Eliminar Rol -->
<div class="modal fade" id="modalEliminarRol" tabindex="-1" role="dialog" aria-labelledby="modalEliminarRolLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalEliminarRolLabel">Eliminar Rol</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>¿Está seguro de que desea eliminar este rol?</p>
                <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="EliminarRol">Eliminar</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Consultar Rol -->
<div class="modal fade" id="modalConsultarRol" tabindex="-1" role="dialog" aria-labelledby="modalConsultarRolLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalConsultarRolLabel">Consultar Rol</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>ID</label>
                    <input type="number" class="form-control" @bind="consultaId" @bind:event="oninput" />
                </div>
                <div class="form-group">
                    <label>Nombre</label>
                    <input type="text" class="form-control" @bind="consultaNombre" readonly />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" @onclick="ConsultarRol">Consultar</button>
                <button type="button" class="btn btn-warning" @onclick="EditarDesdeConsulta" disabled="@(!rolEncontrado)">Modificar</button>
                <button type="button" class="btn btn-danger" @onclick="EliminarDesdeConsulta" disabled="@(!rolEncontrado)">Eliminar</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Dictionary<string, object>> roles = new List<Dictionary<string, object>>();
    private Dictionary<string, object> rolActual = new Dictionary<string, object>();
    private bool rolEncontrado = false;
    private string nombre = "";
    private int consultaId;
    private string consultaNombre = "";
    private int? idActual;

    protected override async Task OnInitializedAsync()
    {
        await CargarRoles();
    }


private async Task CargarRoles()
{
    try
    {
        // Asegurar que roles nunca quede null
        roles = await ServicioApi.ObtenerTodosAsync("proyecto", "rol") 
                 ?? new List<Dictionary<string, object>>();

        StateHasChanged();
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error al cargar roles: {ex.Message}");
        await ServicioJS.InvokeVoidAsync("alert", "Error al cargar roles. Por favor, intente nuevamente.");
    }
}


    private void PrepararParaAgregar()
    {
        nombre = "";
        rolActual = new Dictionary<string, object>();
        idActual = null;
    }

    private async Task PrepararParaEditar(Dictionary<string, object> rol)
    {
        rolActual = new Dictionary<string, object>(rol);
        if (rol.TryGetValue("id", out var id))
        {
            idActual = Convert.ToInt32(id);
        }
        nombre = rol.TryGetValue("nombre", out var n) ? n?.ToString() ?? "" : "";
        await ServicioJS.InvokeVoidAsync("showModal", "modalEditarRol");
    }

    private async Task PrepararParaEliminar(Dictionary<string, object> rol)
    {
        rolActual = new Dictionary<string, object>(rol);
        if (rol.TryGetValue("id", out var id))
        {
            idActual = Convert.ToInt32(id);
        }
        await ServicioJS.InvokeVoidAsync("showModal", "modalEliminarRol");
    }

    private void PrepararParaConsulta()
    {
        consultaId = 0;
        consultaNombre = "";
        rolEncontrado = false;
    }

    private async Task AgregarRol()
    {
        try
        {
            rolActual["nombre"] = nombre;
            bool exito = await ServicioApi.CrearAsync("proyecto", "rol", rolActual);


            if (exito)
            {
                await ServicioJS.InvokeVoidAsync("hideModal", "modalAgregarRol");
                await CargarRoles();
                nombre = string.Empty;
                rolActual = new Dictionary<string, object>();
                await ServicioJS.InvokeVoidAsync("alert", "Rol agregado con éxito.");
            }
            else
            {
                await ServicioJS.InvokeVoidAsync("alert", "Error al agregar el rol.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al agregar rol: {ex.Message}");
            await ServicioJS.InvokeVoidAsync("alert", "Error al agregar el rol.");
        }
    }

    private async Task EditarRol()
    {
        try
        {
            if (!idActual.HasValue) return;

            var rolParaEditar = new Dictionary<string, object>
            {
                ["id"] = idActual.Value,
                ["nombre"] = nombre
            };

            bool exito = await ServicioApi.ActualizarAsync("proyecto", "rol", "id", idActual.Value.ToString(), rolParaEditar);



            if (exito)
            {
                await ServicioJS.InvokeVoidAsync("hideModal", "modalEditarRol");
                await CargarRoles();
                nombre = string.Empty;
                rolActual = new Dictionary<string, object>();
                idActual = null;
                await ServicioJS.InvokeVoidAsync("alert", "Rol modificado con éxito.");
            }
            else
            {
                await ServicioJS.InvokeVoidAsync("alert", "Error al modificar el rol.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al editar rol: {ex.Message}");
            await ServicioJS.InvokeVoidAsync("alert", "Error al editar el rol.");
        }
    }

    private async Task EliminarRol()
    {
        try
        {
            if (!idActual.HasValue) return;

            bool exito = await ServicioApi.EliminarAsync("proyecto", "rol", "id", idActual.Value.ToString());


            
            if (exito)
            {
                await ServicioJS.InvokeVoidAsync("hideModal", "modalEliminarRol");
                await CargarRoles();
                rolActual = new Dictionary<string, object>();
                idActual = null;
                await ServicioJS.InvokeVoidAsync("alert", "Rol eliminado con éxito.");
            }
            else
            {
                await ServicioJS.InvokeVoidAsync("alert", "Error al eliminar el rol.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar rol: {ex.Message}");
            await ServicioJS.InvokeVoidAsync("alert", "Error al eliminar el rol.");
        }
    }


private async Task ConsultarRol()
{
    try
    {
        var resultado = await ServicioApi.ObtenerPorClaveAsync("proyecto", "rol", "id", consultaId.ToString());

        if (resultado != null && resultado.Any())
        {
            var rolConsultado = resultado.First();
            var datosRol = (Dictionary<string, object>)rolConsultado.Value;

            consultaNombre = datosRol.ContainsKey("nombre")
                ? datosRol["nombre"]?.ToString() ?? ""
                : "";

            rolEncontrado = true;
            idActual = consultaId;
        }
        else
        {
            consultaNombre = "";
            rolEncontrado = false;
            await ServicioJS.InvokeVoidAsync("alert", "No se encontró ningún rol con ese ID.");
        }

        StateHasChanged();
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error al consultar rol: {ex.Message}");
        await ServicioJS.InvokeVoidAsync("alert", "Error al consultar el rol.");
    }
}

    private async Task EditarDesdeConsulta()
    {
        try
        {
            rolActual = new Dictionary<string, object>
            {
                ["id"] = consultaId,
                ["nombre"] = consultaNombre
            };
            nombre = consultaNombre;
            idActual = consultaId;
            
            await ServicioJS.InvokeVoidAsync("hideModal", "modalConsultarRol");
            await Task.Delay(300);
            await ServicioJS.InvokeVoidAsync("showModal", "modalEditarRol");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al preparar edición: {ex.Message}");
            await ServicioJS.InvokeVoidAsync("alert", "Error al preparar la edición.");
        }
    }

    private async Task EliminarDesdeConsulta()
    {
        try
        {
            rolActual = new Dictionary<string, object>
            {
                ["id"] = consultaId,
                ["nombre"] = consultaNombre
            };
            idActual = consultaId;

            await ServicioJS.InvokeVoidAsync("hideModal", "modalConsultarRol");
            await Task.Delay(300);
            await ServicioJS.InvokeVoidAsync("showModal", "modalEliminarRol");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al preparar eliminación: {ex.Message}");
            await ServicioJS.InvokeVoidAsync("alert", "Error al preparar la eliminación.");
        }
    }
}