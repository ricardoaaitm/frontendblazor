@page "/sentido"
@using System.Collections.Generic
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager

<PageTitle>lista de sentidos</PageTitle>

<h1>sentido</h1>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="Crearsentido" disabled="@isCreando">Crear sentido</button>
</div>

@if (cargando)
{
    <p><em>Cargando...</em></p>
}
else if (sentido == null || sentido.Count == 0)
{
    <p>No hay sentidos disponibles.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>id</th>
                    <th>Nombre</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var sentidoItem in sentido)
                {
                    <tr>
                        <td>@ObtenerValor(sentidoItem, "id")</td>
                        <td>@ObtenerValor(sentidoItem, "nombre")</td>
                        <td>
                            <button class="btn btn-warning" @onclick="() => Editarsentido(sentidoItem)">Editar</button>
                            <button class="btn btn-danger" @onclick="() => Eliminarsentido(sentidoItem)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (errorMensaje != null)
{
    <div class="alert alert-danger">
        Error: @errorMensaje
    </div>
}

@code {
    private List<Dictionary<string, object>> sentido = new List<Dictionary<string, object>>();
    private bool cargando = true;
    private string? errorMensaje = null;
    private bool isCreando = false;

    private const string PROYECTO = "proyecto";
    private const string TABLA = "sentido";

    protected override async Task OnInitializedAsync()
    {
        await Cargarsentido();
    }

    private async Task Cargarsentido()
    {
        cargando = true;
        errorMensaje = null;

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA);
            sentido = resultado ?? new List<Dictionary<string, object>>();
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar sentido: {ex.Message}";
            sentido = new List<Dictionary<string, object>>();
        }
        finally
        {
            cargando = false;
        }
    }

    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        if (diccionario != null && diccionario.TryGetValue(clave, out var valor))
        {
            return valor?.ToString() ?? string.Empty;
        }
        return string.Empty;
    }

    private async Task Crearsentido()
    {
        isCreando = true;
        // Lógica para crear sentido
        // Puedes implementar un formulario para agregar una nueva sentido
        await Cargarsentido();
        isCreando = false;
    }

    private async Task Editarsentido(Dictionary<string, object> sentidoAEditar)
    {
        // Lógica para editar sentido
        // Puedes navegar a una página para editar o mostrar un formulario de edición
        await Task.Delay(1000); // Simulación de operación
        await Cargarsentido();  // Refrescar los datos
    }

    private async Task Eliminarsentido(Dictionary<string, object> sentidoAEliminar)
    {
        try
        {
            await servicioEntidad.EliminarAsync(PROYECTO, TABLA, sentidoAEliminar["id"].ToString(), "id");
            await Cargarsentido();  // Refrescar los datos después de la eliminación
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al eliminar sentido: {ex.Message}";
        }
    }
}
