@page "/indicador"
@using System.Net.Http.Json
@inject HttpClient Http
@inject IJSRuntime js
@using FrontBlazor.Services
@inject ServicioEntidad servicioEntidad

<h3>Indicadores</h3>

@if (editando || creando)
{
    <EditForm Model="@indicador" OnValidSubmit="GuardarIndicador">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Código:</label>
            <InputText class="form-control" @bind-Value="indicador.Codigo" />
        </div>
        <div class="mb-3">
            <label>Nombre:</label>
            <InputText class="form-control" @bind-Value="indicador.Nombre" />
        </div>
        <div class="mb-3">
            <label>Objetivo:</label>
            <InputTextArea class="form-control" @bind-Value="indicador.Objetivo" />
        </div>
        <div class="mb-3">
            <label>Alcance:</label>
            <InputTextArea class="form-control" @bind-Value="indicador.Alcance" />
        </div>
        <div class="mb-3">
            <label>Fórmula:</label>
            <InputText class="form-control" @bind-Value="indicador.Formula" />
        </div>
        <div class="mb-3">
            <label>Meta:</label>
            <InputText class="form-control" @bind-Value="indicador.Meta" />
        </div>
        <div class="mb-3">
            <label>Tipo de Indicador:</label>
            <InputSelect class="form-control" @bind-Value="indicador.FkidTipoIndicador">
                <option value="">-- Seleccionar --</option>
                @foreach (var item in tiposIndicador)
                {
                    <option value="@item.Id">@item.Nombre</option>
                }
            </InputSelect>
        </div>
        <div class="mb-3">
            <label>Unidad de Medición:</label>
            <InputSelect class="form-control" @bind-Value="indicador.FkidUnidadMedicion">
                <option value="">-- Seleccionar --</option>
                @foreach (var item in unidadesMedicion)
                {
                    <option value="@item.Id">@item.Nombre</option>
                }
            </InputSelect>
        </div>
        <div class="mb-3">
            <label>Sentido:</label>
            <InputSelect class="form-control" @bind-Value="indicador.FkidSentido">
                <option value="">-- Seleccionar --</option>
                @foreach (var item in sentidos)
                {
                    <option value="@item.Id">@item.Nombre</option>
                }
            </InputSelect>
        </div>
        <div class="mb-3">
            <label>Frecuencia:</label>
            <InputSelect class="form-control" @bind-Value="indicador.FkidFrecuencia">
                <option value="">-- Seleccionar --</option>
                @foreach (var item in frecuencias)
                {
                    <option value="@item.Id">@item.Nombre</option>
                }
            </InputSelect>
        </div>
        <div class="mb-3">
            <label>Artículo:</label>
            <InputSelect class="form-control" @bind-Value="indicador.FkidArticulo">
                <option value="">-- Seleccionar --</option>
                @foreach (var item in articulos)
                {
                    <option value="@item.Id">@item.Nombre</option>
                }
            </InputSelect>
        </div>
        <div class="mb-3">
            <label>Literal:</label>
            <InputSelect class="form-control" @bind-Value="indicador.Fkidliteral">
                <option value="">-- Seleccionar --</option>
                @foreach (var item in literales)
                {
                    <option value="@item.Id">@item.Nombre</option>
                }
            </InputSelect>
        </div>
        <div class="mb-3">
            <label>Numeral:</label>
            <InputSelect class="form-control" @bind-Value="indicador.FkidNumeral">
                <option value="">-- Seleccionar --</option>
                @foreach (var item in numerales)
                {
                    <option value="@item.Id">@item.Nombre</option>
                }
            </InputSelect>
        </div>
        <div class="mb-3">
            <label>Parágrafo:</label>
            <InputSelect class="form-control" @bind-Value="indicador.FkidParagrafo">
                <option value="">-- Seleccionar --</option>
                @foreach (var item in paragrafos)
                {
                    <option value="@item.Id">@item.Nombre</option>
                }
            </InputSelect>
        </div>

        <button class="btn btn-success" type="submit">Guardar</button>
        <button class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
    </EditForm>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="Crear">Crear indicador</button>

    @if (!string.IsNullOrEmpty(errorMensaje))
    {
        <div class="alert alert-danger">@errorMensaje</div>
    }

    @if (indicadores == null)
    {
        <p><em>Cargando...</em></p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Código</th>
                    <th>Nombre</th>
                    <th>Objetivo</th>
                    <th>Alcance</th>
                    <th>Fórmula</th>
                    <th>Meta</th>
                    <th>Tipo</th>
                    <th>Unidad</th>
                    <th>Sentido</th>
                    <th>Frecuencia</th>
                    <th>Artículo</th>
                    <th>Literal</th>
                    <th>Numeral</th>
                    <th>Parágrafo</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in indicadores)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Codigo</td>
                        <td>@item.Nombre</td>
                        <td>@item.Objetivo</td>
                        <td>@item.Alcance</td>
                        <td>@item.Formula</td>
                        <td>@item.Meta</td>
                        <td>@item.FkidTipoIndicador</td>
                        <td>@item.FkidUnidadMedicion</td>
                        <td>@item.FkidSentido</td>
                        <td>@item.FkidFrecuencia</td>
                        <td>@item.FkidArticulo</td>
                        <td>@item.Fkidliteral</td>
                        <td>@item.FkidNumeral</td>
                        <td>@item.FkidParagrafo</td>
                        <td>
                            <button class="btn btn-warning btn-sm" @onclick="() => Editar(item)">Editar</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmarEliminar(item.Id)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private List<EntidadGenerica> tiposIndicador = new();
    private List<EntidadGenerica> unidadesMedicion = new();
    private List<EntidadGenerica> sentidos = new();
    private List<EntidadGenerica> frecuencias = new();
    private List<EntidadGenerica> articulos = new();
    private List<EntidadGenerica> literales = new();
    private List<EntidadGenerica> numerales = new();
    private List<EntidadGenerica> paragrafos = new();

    private List<IndicadorDto>? indicadores;
    private IndicadorDto indicador = new();
    private bool creando = false;
    private bool editando = false;
    private string errorMensaje = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await CargarListas();
        await CargarIndicadores();
    }

    private async Task CargarListas()
    {
        try { tiposIndicador = await Http.GetFromJsonAsync<List<EntidadGenerica>>("proyecto/tipoindicador") ?? new(); } catch { tiposIndicador = new(); }
        try { unidadesMedicion = await Http.GetFromJsonAsync<List<EntidadGenerica>>("proyecto/unidadmedicion") ?? new(); } catch { unidadesMedicion = new(); }
        try { sentidos = await Http.GetFromJsonAsync<List<EntidadGenerica>>("proyecto/sentido") ?? new(); } catch { sentidos = new(); }
        try { frecuencias = await Http.GetFromJsonAsync<List<EntidadGenerica>>("proyecto/frecuencia") ?? new(); } catch { frecuencias = new(); }
        try { articulos = await Http.GetFromJsonAsync<List<EntidadGenerica>>("proyecto/articulo") ?? new(); } catch { articulos = new(); }
        try { literales = await Http.GetFromJsonAsync<List<EntidadGenerica>>("proyecto/literal") ?? new(); } catch { literales = new(); }
        try { numerales = await Http.GetFromJsonAsync<List<EntidadGenerica>>("proyecto/numeral") ?? new(); } catch { numerales = new(); }
        try { paragrafos = await Http.GetFromJsonAsync<List<EntidadGenerica>>("proyecto/paragrafo") ?? new(); } catch { paragrafos = new(); }
    }

    private async Task CargarIndicadores()
    {
        try
        {
            indicadores = await Http.GetFromJsonAsync<List<IndicadorDto>>("api/indicador");
        }
        catch (Exception ex)
        {
            errorMensaje = "Error al cargar indicadores: " + ex.Message;
        }
    }

    private void Crear()
    {
        creando = true;
        editando = false;
        indicador = new();
    }

    private void Editar(IndicadorDto item)
    {
        creando = false;
        editando = true;
        indicador = item;
    }

    private async Task GuardarIndicador()
    {
        HttpResponseMessage resp;

        if (creando)
            resp = await Http.PostAsJsonAsync("api/indicador", indicador);
        else
            resp = await Http.PutAsJsonAsync($"api/indicador/{indicador.Id}", indicador);

        if (resp.IsSuccessStatusCode)
            await js.InvokeVoidAsync("alert", "Indicador guardado correctamente");

        creando = editando = false;
        await CargarIndicadores();
    }

    private async Task ConfirmarEliminar(int? id)
    {
        if (id == null) return;

        var confirmar = await js.InvokeAsync<bool>("confirm", $"¿Eliminar indicador {id}?");
        if (confirmar)
        {
            await Http.DeleteAsync($"api/indicador/{id}");
            await CargarIndicadores();
        }
    }

    private void Cancelar()
    {
        creando = false;
        editando = false;
    }

    public class EntidadGenerica
    {
        public string Id { get; set; } = string.Empty;
        public string Nombre { get; set; } = string.Empty;
    }

    public class IndicadorDto
    {
        public int? Id { get; set; }
        public string Codigo { get; set; } = string.Empty;
        public string Nombre { get; set; } = string.Empty;
        public string Objetivo { get; set; } = string.Empty;
        public string Alcance { get; set; } = string.Empty;
        public string Formula { get; set; } = string.Empty;
        public string Meta { get; set; } = string.Empty;
        public int FkidTipoIndicador { get; set; }
        public int FkidUnidadMedicion { get; set; }
        public int FkidSentido { get; set; }
        public int FkidFrecuencia { get; set; }
        public string? FkidArticulo { get; set; }
        public string? Fkidliteral { get; set; }
        public string? FkidNumeral { get; set; }
        public string? FkidParagrafo { get; set; }
    }
}
